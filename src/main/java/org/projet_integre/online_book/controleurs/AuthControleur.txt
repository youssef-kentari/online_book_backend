package org.projet_integre.online_book.controleurs;

import java.util.ArrayList;
import java.util.Collection;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.projet_integre.online_book.DTO.Admin_DTO;
import org.projet_integre.online_book.DTO.Client_DTO;
import org.projet_integre.online_book.models.Role;
import org.projet_integre.online_book.models.users.Bibliothecaire;
import org.projet_integre.online_book.models.users.Client;
import org.projet_integre.online_book.repository.AdminRepository;
import org.projet_integre.online_book.repository.ClientRepository;
import org.projet_integre.online_book.securite.JwtRequestFilter;
import org.projet_integre.online_book.securite.JwtUtil;
import org.projet_integre.online_book.services.AdminService;
import org.projet_integre.online_book.services.ClientService;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/auth")
public class AuthControleur {
    private static final Logger logger = LoggerFactory.getLogger(JwtRequestFilter.class);

    private final ClientRepository clientRepository;
    private final AdminRepository adminRepository;
    private final ClientService clientService;
    private final PasswordEncoder passwordEncoder;
    private final AdminService adminService;
    private final JwtUtil jwtUtil;

    public AuthControleur(ClientRepository clientRepository, AdminRepository adminRepository, JwtUtil jwtUtil,
            ClientService clientService, PasswordEncoder passwordEncoder, AdminService adminService) {
        this.clientRepository = clientRepository;
        this.adminRepository = adminRepository;
        this.clientService = clientService;
        this.passwordEncoder = passwordEncoder;
        this.adminService = adminService;
        this.jwtUtil = jwtUtil;
    }

    @PostMapping("/register/client")
    public ResponseEntity<String> register(@RequestBody Client client) {
        client.setRole(Role.CLIENT);
        client.setPassword(clientService.hashPassword(client.getPassword()));
        clientRepository.save(client);
        return ResponseEntity.ok("Client registered successfully.");
    }

    @PostMapping("/register/admin")
    public ResponseEntity<String> register(@RequestBody Bibliothecaire admin) {
        admin.setRole(Role.ADMIN);
        admin.setPassword(adminService.hashPassword(admin.getPassword()));
        adminRepository.save(admin);
        return ResponseEntity.ok("Administrateur registered successfully.");
    }

    @PostMapping("/login/admin")
    public ResponseEntity<String> loginAdmin(@RequestBody Admin_DTO adminDto) {
        try {
            // Fix token field name
            Bibliothecaire storedAdmin = adminRepository.findByTocken(adminDto.getTocken());
            if (storedAdmin == null || !passwordEncoder.matches(adminDto.getPassword(), storedAdmin.getPassword())) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials.");
            }

            // Ensure role is properly handled and not null
            String role = "ROLE_" + storedAdmin.getRole().toString(); // Ensure the role has the "ROLE_" prefix
            Collection<GrantedAuthority> authorities = new ArrayList<>();
            authorities.add(new SimpleGrantedAuthority(role));

            UserDetails userDetails = new org.springframework.security.core.userdetails.User(
                    storedAdmin.getUsername(),
                    storedAdmin.getPassword(),
                    authorities);

            String jwt = jwtUtil.generateToken(userDetails);
            logger.debug("Generated JWT: " + jwt); // Log token for debugging

            return ResponseEntity.ok(jwt);
        } catch (BadCredentialsException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials.");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An unexpected error occurred.");
        }
    }

    @PostMapping("/login/client")
    public ResponseEntity<String> loginClient(@RequestBody Client_DTO clientDto) {
        Client storedClient = clientRepository.findByMatricule(clientDto.getMatricule());
        if (storedClient == null || !passwordEncoder.matches(clientDto.getPassword(), storedClient.getPassword())) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials.");
        }

        Collection<GrantedAuthority> authorities = new ArrayList<>();
        authorities.add(new SimpleGrantedAuthority(storedClient.getRole().toString()));

        UserDetails userDetails = new org.springframework.security.core.userdetails.User(
                storedClient.getUsername(),
                storedClient.getPassword(),
                authorities);

        String jwt = jwtUtil.generateToken(userDetails);
        return ResponseEntity.ok(jwt);
    }

}
